
###############################
###############################
###############################
###############################
Checking Versions:  deseq2_release_3_14 deseq2_master

{
    "package": "single_test",
    "release_versions": "deseq2_release_3_14 deseq2_master",
    "old_release_number": 1,
    "new_release_number": 2,
    "function_removals": 0,
    "function_additions": 0,
    "parameter_removals": 1,
    "parameter_additions": 0,
    "parameter_renames": 1,
    "parameter_default_changes": 0
}

##########
Functions Removed
##########



##########
Functions Added
##########



##########
Removed Parameters
##########

0.
{
  "old_function": {
    "name": "vst",
    "representation": "vst",
    "parameters": "function ( q , alpha )",
    "body": "( 2 * asinh ( sqrt ( alpha * q ) ) - log ( alpha ) - log ( 4 ) ) / log ( 2 )",
    "filename": "helper.txt"
  },
  "new_function": {
    "name": "vst",
    "representation": "vst",
    "parameters": "function ( object , blind = TRUE , nsub = 1000 , fitType = \"parametric\" )",
    "body": "{  if (    nrow (  object ) undefined  nsub )  {   stop (  \"less than 'nsub' rows,\r\n  it is recommended to use varianceStabilizingTransformation directly\" ) }  if (   is.null (   colnames (  object ) ) )  {    colnames (  object ) -   seq_len (   ncol (  object ) ) }  if (   is.matrix (  object ) )  {   matrixIn -  TRUE   object -   DESeqDataSetFromMatrix (  object ,   DataFrame ( row.names =   colnames (  object ) ) ,  ~  1 ) } else  {  if (  blind )  {    design (  object ) -  ~  1 }   matrixIn -  FALSE }  if (    is.null (   sizeFactors (  object ) ) undefined   is.null (   normalizationFactors (  object ) ) )  {   object -   estimateSizeFactors (  object ) }   baseMean -   rowMeans (   counts (  object , normalized =  TRUE ) )  if (    sum (   baseMean undefined  5 ) undefined  nsub )  {   stop (  \"less than 'nsub' rows with mean normalized count ) } # subset to a specified number of genes with mean normalized count   object.sub -   object [   baseMean undefined  5 , ]   baseMean -   baseMean [   baseMean undefined  5 ]   o -   order (  baseMean )   idx -   o [   round (   seq ( from =  1 , to =   length (  o ) , length =  nsub ) ) ]   object.sub -   object.sub [  idx , ] # estimate dispersion trend   object.sub -   estimateDispersionsGeneEst (  object.sub , quiet =  TRUE )   object.sub -   estimateDispersionsFit (  object.sub , fitType =  fitType , quiet =  TRUE ) # assign to the full object   suppressMessages (  {    dispersionFunction (  object ) -   dispersionFunction (  object.sub ) } ) # calculate and apply the VST   vsd -   varianceStabilizingTransformation (  object , blind =  FALSE )  if (  matrixIn )  {   return (   assay (  vsd ) ) } else  {   return (  vsd ) } } ",
    "filename": "vst.txt"
  }
}



##########
Added Parameters
##########



##########
Renamed Parameters
##########

0.
{
  "old_function": {
    "name": "vst",
    "representation": "vst",
    "parameters": "function ( object , blind = TRUE , nsub = 1000 , fitType = \"parametric\" )",
    "body": "{  if (    nrow (  object ) undefined  nsub )  {   stop (  \"less than 'nsub' rows,\r\n  it is recommended to use varianceStabilizingTransformation directly\" ) }  if (   is.null (   colnames (  object ) ) )  {    colnames (  object ) -   seq_len (   ncol (  object ) ) }  if (   is.matrix (  object ) )  {   matrixIn -  TRUE   object -   DESeqDataSetFromMatrix (  object ,   DataFrame ( row.names =   colnames (  object ) ) ,  ~  1 ) } else  {  if (  blind )  {    design (  object ) -  ~  1 }   matrixIn -  FALSE }  if (    is.null (   sizeFactors (  object ) ) undefined   is.null (   normalizationFactors (  object ) ) )  {   object -   estimateSizeFactors (  object ) }   baseMean -   rowMeans (   counts (  object , normalized =  TRUE ) )  if (    sum (   baseMean undefined  5 ) undefined  nsub )  {   stop (  \"less than 'nsub' rows with mean normalized count ) } # subset to a specified number of genes with mean normalized count   object.sub -   object [   baseMean undefined  5 , ]   baseMean -   baseMean [   baseMean undefined  5 ]   o -   order (  baseMean )   idx -   o [   round (   seq ( from =  1 , to =   length (  o ) , length =  nsub ) ) ]   object.sub -   object.sub [  idx , ] # estimate dispersion trend   object.sub -   estimateDispersionsGeneEst (  object.sub , quiet =  TRUE )   object.sub -   estimateDispersionsFit (  object.sub , fitType =  fitType , quiet =  TRUE ) # assign to the full object   suppressMessages (  {    dispersionFunction (  object ) -   dispersionFunction (  object.sub ) } ) # calculate and apply the VST   vsd -   varianceStabilizingTransformation (  object , blind =  FALSE )  if (  matrixIn )  {   return (   assay (  vsd ) ) } else  {   return (  vsd ) } } ",
    "filename": "vst.txt"
  },
  "new_function": {
    "name": "vst",
    "representation": "vst",
    "parameters": "function ( q , alpha )",
    "body": "( 2 * asinh ( sqrt ( alpha * q ) ) - log ( alpha ) - log ( 4 ) ) / log ( 2 )",
    "filename": "helper.txt"
  }
}



##########
Parameter Default Value Changes
##########

