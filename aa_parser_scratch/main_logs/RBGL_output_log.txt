
###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_1_5 rbgl_release_1_6

{
    "package": "RBGL",
    "release_versions": "rbgl_release_1_5 rbgl_release_1_6",
    "desc_release_old": "1.3.7",
    "desc_release_new": "1.3.13",
    "old_release_number": 1,
    "new_release_number": 2,
    "function_removals": 0,
    "function_additions": 24,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 1,
    "total_count": 1
}

##########
Functions Removed
##########



##########
Functions Added
##########

aver.wavefront
bandwidth
bellman.ford.sp
betweenness.centrality.clustering
brandes.betweenness.centrality
circle.layout
cuthill.mckee.ordering
dag.sp
edmunds.karp.max.flow
init.incremental.components
incremental.components
ith.wavefront
isomorphism
kamada.kawai.spring.layout
maxWavefront
minCut
minDegreeOrdering
prim.minST
gprofile
push.relabel.max.flow
rms.wavefront
same.component
sloan.ordering
transitive.closure


##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (  checkConn )  {  if (    length (   connectedComp (  object ) ) undefined  1 )   stop (  \"graph is not connected\" ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" ) ## names(ans) ## ans$nodes ## ans[[\"edgeList\"]]   ans +  1 } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (  checkConn )  {  if (    length (   connectedComp (  object ) ) undefined  1 )   stop (  \"graph is not connected\" ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" ) ## names(ans) ## ans$nodes ## ans[[\"edgeList\"]]   ans +  1 } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (  checkConn )  {  if (    length (   connectedComp (  object ) ) undefined  1 )   stop (  \"graph is not connected\" ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" ) ## names(ans) ## ans$nodes ## ans[[\"edgeList\"]]   ans +  1 } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_1_6 rbgl_release_1_7

{
    "package": "RBGL",
    "release_versions": "rbgl_release_1_6 rbgl_release_1_7",
    "desc_release_old": "1.3.13",
    "desc_release_new": "1.6.0",
    "old_release_number": 2,
    "new_release_number": 3,
    "function_removals": 0,
    "function_additions": 1,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 1,
    "total_count": 1
}

##########
Functions Removed
##########



##########
Functions Added
##########

highlyConnSG


##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (  checkConn )  {  if (    length (   connectedComp (  object ) ) undefined  1 )   stop (  \"graph is not connected\" ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" ) ## names(ans) ## ans$nodes ## ans[[\"edgeList\"]]   ans +  1 } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (  checkConn )  {  if (    length (   connectedComp (  object ) ) undefined  1 )   stop (  \"graph is not connected\" ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" ) ## names(ans) ## ans$nodes ## ans[[\"edgeList\"]]   ans +  1 } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (  checkConn )  {  if (    length (   connectedComp (  object ) ) undefined  1 )   stop (  \"graph is not connected\" ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" ) ## names(ans) ## ans$nodes ## ans[[\"edgeList\"]]   ans +  1 } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_1_7 rbgl_release_1_8

{
    "package": "RBGL",
    "release_versions": "rbgl_release_1_7 rbgl_release_1_8",
    "desc_release_old": "1.6.0",
    "desc_release_new": "1.8.1",
    "old_release_number": 3,
    "new_release_number": 4,
    "function_removals": 0,
    "function_additions": 14,
    "parameter_removals": 2,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 1,
    "total_count": 1
}

##########
Functions Removed
##########



##########
Functions Added
##########

articulationPoints
astarSearch
biConnComp
floyd.warshall.all.pairs.sp
fruchtermanReingoldForceDirectedLayout
gursoyAtunLayout
is.triangulated
kCores
kCliques
kingOrdering
maxClique
randomGraphLayout
separates
sequential.vertex.coloring


##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}

1.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (  checkConn )  {  if (    length (   connectedComp (  object ) ) undefined  1 )   stop (  \"graph is not connected\" ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" ) ## names(ans) ## ans$nodes ## ans[[\"edgeList\"]]   ans +  1 } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (  checkConn )  {  if (    length (   connectedComp (  object ) ) undefined  1 )   stop (  \"graph is not connected\" ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" ) ## names(ans) ## ans$nodes ## ans[[\"edgeList\"]]   ans +  1 } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (  checkConn )  {  if (    length (   connectedComp (  object ) ) undefined  1 )   stop (  \"graph is not connected\" ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" ) ## names(ans) ## ans$nodes ## ans[[\"edgeList\"]]   ans +  1 } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_1_8 rbgl_release_1_9

{
    "package": "RBGL",
    "release_versions": "rbgl_release_1_8 rbgl_release_1_9",
    "desc_release_old": "1.8.1",
    "desc_release_new": "1.10.0",
    "old_release_number": 4,
    "new_release_number": 5,
    "function_removals": 0,
    "function_additions": 5,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 1,
    "total_count": 1
}

##########
Functions Removed
##########



##########
Functions Added
##########

clusteringCoef
clusteringCoefAppr
graphGenerator
lambdaSets
transitivity


##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_1_9 rbgl_release_2_1

{
    "package": "RBGL",
    "release_versions": "rbgl_release_1_9 rbgl_release_2_1",
    "desc_release_old": "1.10.0",
    "desc_release_new": "1.14.0",
    "old_release_number": 5,
    "new_release_number": 6,
    "function_removals": 1,
    "function_additions": 2,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 2,
    "total_count": 3
}

##########
Functions Removed
##########

sp.between.old


##########
Functions Added
##########

mstree.prim
removeSelfLoops


##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}

1.
{
  "old_function": {
    "name": "sp.between.scalar",
    "representation": "sp.between.scalar",
    "parameters": "function ( g , start , finish , eW = unlist ( edgeWeights ( g ) ) )",
    "body": "{   f -  finish   s -  start  if (    length (  f ) undefined  1 )   stop (  \"finish must be scalar\" )  if (    length (  s ) undefined  1 )   stop (  \"start must be scalar\" )   no -   nodes (  g )  if (   any (   is.na (   lk -   match (   c (  s ,  f ) ,  no ) ) ) )   stop (   paste (   paste (    c (  s ,  f ) [   is.na (  lk ) ] , collapse =  \" \" ) ,  \"not in nodes of g\" ) )   s -   (   1 :   length (  no ) ) [   no ==  s ]   f -   (   1 :   length (  no ) ) [   no ==  f ]   ff -  f   sp -   dijkstra.sp (  g ,  start ,  eW )  if (     sp $ distances [  ff ] =   .Machine $ double.xmax )   stop (   paste (  \"no path from\" ,   no [  s ] ,  \"to\" ,   no [  f ] ) )   pens -   sp $ penult   path -  f  while (    path [  1 ] !=  s )  {   path -   c (   pens [  f ] ,  path )   f -   pens [  f ] }   list ( length =    sp $ distances [  ff ] , path =   no [  path ] ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "sp.between.scalar",
    "representation": "sp.between.scalar",
    "parameters": "function ( g , start , finish )",
    "body": "{   stop (  \"sp.between.scalar is obsolete, use sp.between instead\" ) } ",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_2_1 rbgl_release_2_2

{
    "package": "RBGL",
    "release_versions": "rbgl_release_2_1 rbgl_release_2_2",
    "desc_release_old": "1.14.0",
    "desc_release_new": "1.16.0",
    "old_release_number": 6,
    "new_release_number": 7,
    "function_removals": 0,
    "function_additions": 3,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 2,
    "total_count": 2
}

##########
Functions Removed
##########



##########
Functions Added
##########

circleLayout
dominatorTree
kamadaKawaiSpringLayout


##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}

1.
{
  "old_function": {
    "name": "randomGraphLayout",
    "representation": "randomGraphLayout",
    "parameters": "function ( g , width = 1 , height = 1 )",
    "body": "{   nv -   length (   nodes (  g ) )   em -   edgeMatrix (  g )   ne -   ncol (  em )   ans -   .Call (  \"BGL_random_layout\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.double (  width ) ,   as.double (  height ) , PACKAGE =  \"RBGL\" )    rownames (   ans [[  1 ] ] ) -   c (  \"x\" ,  \"y\" )    colnames (   ans [[  1 ] ] ) -   nodes (  g )   list ( \"randomGraphLayout\" =   ans [[  1 ] ] ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "randomGraphLayout",
    "representation": "randomGraphLayout",
    "parameters": "function ( g , minX = 0 , maxX = 1 , minY = 0 , maxY = 1 )",
    "body": "{  if (   isDirected (  g ) )   stop (  \"only applicable to undirected graphs\" )  if (    minX =  maxX ||   minY =  maxY )   stop (  \"requires: minX )   nv -   length (   nodes (  g ) )   em -   edgeMatrix (  g )   ne -   ncol (  em )   ans -   .Call (  \"BGL_random_layout\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.double (  minX ) ,   as.double (  maxX ) ,   as.double (  minY ) ,   as.double (  maxY ) , PACKAGE =  \"RBGL\" )    rownames (  ans ) -   c (  \"x\" ,  \"y\" )    colnames (  ans ) -   nodes (  g )  ans } ",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_2_2 rbgl_release_2_3

{
    "package": "RBGL",
    "release_versions": "rbgl_release_2_2 rbgl_release_2_3",
    "desc_release_old": "1.16.0",
    "desc_release_new": "1.18.0",
    "old_release_number": 7,
    "new_release_number": 8,
    "function_removals": 0,
    "function_additions": 15,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 1,
    "total_count": 1
}

##########
Functions Removed
##########



##########
Functions Added
##########

boyerMyrvoldPlanarityTest
chrobakPayneStraightLineDrawing
edmondsMaxCardinalityMatching
isKuratowskiSubgraph
isStraightLineDrawing
kolmogorovMaxFlow
lengauerTarjanDominatorTree
makeBiconnectedPlanar
makeConnected
makeMaximalPlanar
maximumCycleRatio
minimumCycleRatio
planarCanonicalOrdering
planarFaceTraversal
sloanStartEndVertices


##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_2_3 rbgl_release_2_4

{
    "package": "RBGL",
    "release_versions": "rbgl_release_2_3 rbgl_release_2_4",
    "desc_release_old": "1.18.0",
    "desc_release_new": "1.20.0",
    "old_release_number": 8,
    "new_release_number": 9,
    "function_removals": 0,
    "function_additions": 0,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 1,
    "total_count": 1
}

##########
Functions Removed
##########



##########
Functions Added
##########



##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_2_4 rbgl_release_2_5

{
    "package": "RBGL",
    "release_versions": "rbgl_release_2_4 rbgl_release_2_5",
    "desc_release_old": "1.20.0",
    "desc_release_new": "1.22.0",
    "old_release_number": 9,
    "new_release_number": 10,
    "function_removals": 2,
    "function_additions": 3,
    "parameter_removals": 1,
    "parameter_additions": 2,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 2,
    "total_count": 4
}

##########
Functions Removed
##########

edmunds.karp.max.flow
kolmogorovMaxFlow


##########
Functions Added
##########

edmondsOptimumBranching
edmonds.karp.max.flow
kolmogorov.max.flow


##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}

1.
{
  "old_function": {
    "name": "isStraightLineDrawing",
    "representation": "isStraightLineDrawing",
    "parameters": "function ( g )",
    "body": "{   list (  \"This function is not implemented yet\" ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "isStraightLineDrawing",
    "representation": "isStraightLineDrawing",
    "parameters": "function ( g , drawing )",
    "body": "{  if (   isDirected (  g ) )   stop (  \"only appropriate for undirected graphs\" )   nv -   length (   nodes (  g ) )   em -   edgeMatrix (  g )   ne -   ncol (  em )  if (    !   is.matrix (  drawing ) ||    nrow (  drawing ) !=  2 ||    ncol (  drawing ) !=  nv )   stop (  \"needs 2xm matrix for coordinates\" )   ans -   .Call (  \"isStraightLineDrawing\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (  drawing ) , PACKAGE =  \"RBGL\" )   as.logical (  ans ) } ",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}

1.
{
  "old_function": {
    "name": "isStraightLineDrawing",
    "representation": "isStraightLineDrawing",
    "parameters": "function ( g )",
    "body": "{   list (  \"This function is not implemented yet\" ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "isStraightLineDrawing",
    "representation": "isStraightLineDrawing",
    "parameters": "function ( g , drawing )",
    "body": "{  if (   isDirected (  g ) )   stop (  \"only appropriate for undirected graphs\" )   nv -   length (   nodes (  g ) )   em -   edgeMatrix (  g )   ne -   ncol (  em )  if (    !   is.matrix (  drawing ) ||    nrow (  drawing ) !=  2 ||    ncol (  drawing ) !=  nv )   stop (  \"needs 2xm matrix for coordinates\" )   ans -   .Call (  \"isStraightLineDrawing\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (  drawing ) , PACKAGE =  \"RBGL\" )   as.logical (  ans ) } ",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_2_5 rbgl_release_2_6

{
    "package": "RBGL",
    "release_versions": "rbgl_release_2_5 rbgl_release_2_6",
    "desc_release_old": "1.22.0",
    "desc_release_new": "1.24.0",
    "old_release_number": 10,
    "new_release_number": 11,
    "function_removals": 0,
    "function_additions": 0,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 1,
    "total_count": 1
}

##########
Functions Removed
##########



##########
Functions Added
##########



##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_2_6 rbgl_release_2_7

{
    "package": "RBGL",
    "release_versions": "rbgl_release_2_6 rbgl_release_2_7",
    "desc_release_old": "1.24.0",
    "desc_release_new": "1.26.0",
    "old_release_number": 11,
    "new_release_number": 12,
    "function_removals": 0,
    "function_additions": 0,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 1,
    "total_count": 1
}

##########
Functions Removed
##########



##########
Functions Added
##########



##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_2_7 rbgl_release_2_8

{
    "package": "RBGL",
    "release_versions": "rbgl_release_2_7 rbgl_release_2_8",
    "desc_release_old": "1.26.0",
    "desc_release_new": "1.28.0",
    "old_release_number": 12,
    "new_release_number": 13,
    "function_removals": 0,
    "function_additions": 0,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 1,
    "total_count": 1
}

##########
Functions Removed
##########



##########
Functions Added
##########



##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_2_8 rbgl_release_2_9

{
    "package": "RBGL",
    "release_versions": "rbgl_release_2_8 rbgl_release_2_9",
    "desc_release_old": "1.28.0",
    "desc_release_new": "1.30.1",
    "old_release_number": 13,
    "new_release_number": 14,
    "function_removals": 0,
    "function_additions": 0,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 1,
    "total_count": 1
}

##########
Functions Removed
##########



##########
Functions Added
##########



##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_2_9 rbgl_release_2_11

{
    "package": "RBGL",
    "release_versions": "rbgl_release_2_9 rbgl_release_2_11",
    "desc_release_old": "1.30.1",
    "desc_release_new": "1.34.1",
    "old_release_number": 14,
    "new_release_number": 15,
    "function_removals": 0,
    "function_additions": 0,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 2,
    "total_count": 2
}

##########
Functions Removed
##########



##########
Functions Added
##########



##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "prim.minST",
    "representation": "prim.minST",
    "parameters": "function ( g )",
    "body": "{   .Deprecated (  \"mstree.prim\" ,  \"RBGL\" )   mstree.prim (  g ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "prim.minST",
    "representation": "prim.minST",
    "parameters": "function ( )",
    "body": "{   .Defunct (  \"mstree.prim\" ,  \"RBGL\" ) } ",
    "filename": "interfaces.txt"
  }
}

1.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_2_11 rbgl_release_2_12

{
    "package": "RBGL",
    "release_versions": "rbgl_release_2_11 rbgl_release_2_12",
    "desc_release_old": "1.34.1",
    "desc_release_new": "1.36.2",
    "old_release_number": 15,
    "new_release_number": 16,
    "function_removals": 0,
    "function_additions": 0,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 1,
    "total_count": 1
}

##########
Functions Removed
##########



##########
Functions Added
##########



##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_2_12 rbgl_release_2_13

{
    "package": "RBGL",
    "release_versions": "rbgl_release_2_12 rbgl_release_2_13",
    "desc_release_old": "1.36.2",
    "desc_release_new": "1.38.0",
    "old_release_number": 16,
    "new_release_number": 17,
    "function_removals": 0,
    "function_additions": 0,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 1,
    "total_count": 1
}

##########
Functions Removed
##########



##########
Functions Added
##########



##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_2_13 rbgl_release_2_14

{
    "package": "RBGL",
    "release_versions": "rbgl_release_2_13 rbgl_release_2_14",
    "desc_release_old": "1.38.0",
    "desc_release_new": "1.40.1",
    "old_release_number": 17,
    "new_release_number": 18,
    "function_removals": 0,
    "function_additions": 0,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 1,
    "total_count": 1
}

##########
Functions Removed
##########



##########
Functions Added
##########



##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_2_14 rbgl_release_3_1

{
    "package": "RBGL",
    "release_versions": "rbgl_release_2_14 rbgl_release_3_1",
    "desc_release_old": "1.40.1",
    "desc_release_new": "1.44.0",
    "old_release_number": 18,
    "new_release_number": 19,
    "function_removals": 0,
    "function_additions": 0,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 1,
    "total_count": 1
}

##########
Functions Removed
##########



##########
Functions Added
##########



##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_3_1 rbgl_release_3_2

{
    "package": "RBGL",
    "release_versions": "rbgl_release_3_1 rbgl_release_3_2",
    "desc_release_old": "1.44.0",
    "desc_release_new": "1.46.0",
    "old_release_number": 19,
    "new_release_number": 20,
    "function_removals": 0,
    "function_additions": 0,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 1,
    "total_count": 1
}

##########
Functions Removed
##########



##########
Functions Added
##########



##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_3_2 rbgl_release_3_3

{
    "package": "RBGL",
    "release_versions": "rbgl_release_3_2 rbgl_release_3_3",
    "desc_release_old": "1.46.0",
    "desc_release_new": "1.48.1",
    "old_release_number": 20,
    "new_release_number": 21,
    "function_removals": 0,
    "function_additions": 0,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 1,
    "total_count": 1
}

##########
Functions Removed
##########



##########
Functions Added
##########



##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_3_3 rbgl_release_3_4

{
    "package": "RBGL",
    "release_versions": "rbgl_release_3_3 rbgl_release_3_4",
    "desc_release_old": "1.48.1",
    "desc_release_new": "1.50.0",
    "old_release_number": 21,
    "new_release_number": 22,
    "function_removals": 0,
    "function_additions": 0,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 1,
    "total_count": 1
}

##########
Functions Removed
##########



##########
Functions Added
##########



##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_3_4 rbgl_release_3_5

{
    "package": "RBGL",
    "release_versions": "rbgl_release_3_4 rbgl_release_3_5",
    "desc_release_old": "1.50.0",
    "desc_release_new": "1.52.0",
    "old_release_number": 22,
    "new_release_number": 23,
    "function_removals": 0,
    "function_additions": 0,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 1,
    "total_count": 1
}

##########
Functions Removed
##########



##########
Functions Added
##########



##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_3_5 rbgl_release_3_6

{
    "package": "RBGL",
    "release_versions": "rbgl_release_3_5 rbgl_release_3_6",
    "desc_release_old": "1.52.0",
    "desc_release_new": "1.54.0",
    "old_release_number": 23,
    "new_release_number": 24,
    "function_removals": 0,
    "function_additions": 0,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 1,
    "total_count": 1
}

##########
Functions Removed
##########



##########
Functions Added
##########



##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_3_6 rbgl_release_3_7

{
    "package": "RBGL",
    "release_versions": "rbgl_release_3_6 rbgl_release_3_7",
    "desc_release_old": "1.54.0",
    "desc_release_new": "1.56.0",
    "old_release_number": 24,
    "new_release_number": 25,
    "function_removals": 0,
    "function_additions": 0,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 1,
    "total_count": 1
}

##########
Functions Removed
##########



##########
Functions Added
##########



##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_3_7 rbgl_release_3_8

{
    "package": "RBGL",
    "release_versions": "rbgl_release_3_7 rbgl_release_3_8",
    "desc_release_old": "1.56.0",
    "desc_release_new": "1.58.2",
    "old_release_number": 25,
    "new_release_number": 26,
    "function_removals": 0,
    "function_additions": 0,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 1,
    "total_count": 1
}

##########
Functions Removed
##########



##########
Functions Added
##########



##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_3_8 rbgl_release_3_9

{
    "package": "RBGL",
    "release_versions": "rbgl_release_3_8 rbgl_release_3_9",
    "desc_release_old": "1.58.2",
    "desc_release_new": "1.60.0",
    "old_release_number": 26,
    "new_release_number": 27,
    "function_removals": 0,
    "function_additions": 0,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 1,
    "total_count": 1
}

##########
Functions Removed
##########



##########
Functions Added
##########



##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_3_9 rbgl_release_3_11

{
    "package": "RBGL",
    "release_versions": "rbgl_release_3_9 rbgl_release_3_11",
    "desc_release_old": "1.60.0",
    "desc_release_new": "1.64.0",
    "old_release_number": 27,
    "new_release_number": 28,
    "function_removals": 0,
    "function_additions": 0,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 1,
    "total_count": 1
}

##########
Functions Removed
##########



##########
Functions Added
##########



##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_3_11 rbgl_release_3_12

{
    "package": "RBGL",
    "release_versions": "rbgl_release_3_11 rbgl_release_3_12",
    "desc_release_old": "1.64.0",
    "desc_release_new": "1.66.0",
    "old_release_number": 28,
    "new_release_number": 29,
    "function_removals": 0,
    "function_additions": 0,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 1,
    "total_count": 1
}

##########
Functions Removed
##########



##########
Functions Added
##########



##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_3_12 rbgl_release_3_13

{
    "package": "RBGL",
    "release_versions": "rbgl_release_3_12 rbgl_release_3_13",
    "desc_release_old": "1.66.0",
    "desc_release_new": "1.68.0",
    "old_release_number": 29,
    "new_release_number": 30,
    "function_removals": 0,
    "function_additions": 0,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 1,
    "total_count": 1
}

##########
Functions Removed
##########



##########
Functions Added
##########



##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_3_13 rbgl_release_3_14

{
    "package": "RBGL",
    "release_versions": "rbgl_release_3_13 rbgl_release_3_14",
    "desc_release_old": "1.68.0",
    "desc_release_new": "1.70.0",
    "old_release_number": 30,
    "new_release_number": 31,
    "function_removals": 0,
    "function_additions": 0,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 1,
    "total_count": 1
}

##########
Functions Removed
##########



##########
Functions Added
##########



##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}


###############################
###############################
###############################
###############################
Checking Versions:  rbgl_release_3_14 rbgl_master

{
    "package": "RBGL",
    "release_versions": "rbgl_release_3_14 rbgl_master",
    "desc_release_old": "1.70.0",
    "desc_release_new": "1.71.0",
    "old_release_number": 31,
    "new_release_number": 32,
    "function_removals": 0,
    "function_additions": 0,
    "parameter_removals": 1,
    "parameter_additions": 1,
    "parameter_renames": 0,
    "parameter_default_changes": 0,
    "parameter_overall_changes": 1,
    "total_count": 1
}

##########
Functions Removed
##########



##########
Functions Added
##########



##########
Removed Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  }
}



##########
Added Non Default Parameters
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}



##########
All Parameter Breaking Changes
##########

0.
{
  "old_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node = nodes ( object ) [ 1 ] , checkConn = TRUE )",
    "body": "{   nodvec -   nodes (  object )  if (  !  checkConn )   warning (  \"API is changing: checkConn is disregarded, connectivity always checked.\" )  if (   is.na (   startind -   match (  node ,  nodvec ) ) )   stop (  \"starting node not found in nodes of graph\" )  if (    length (   ccc -   connectedComp (  object ) ) undefined  1 )  {   warning (  \"graph is not connected; returning bfs applied to each connected component\" )   alln -   lapply (  ccc ,  function ( x )   nodes (   subGraph (  x ,  object ) ) )   hasStart -   sapply (  alln ,  function ( x )   node %in%  x )   def -   lapply (   ccc [  -   which (  hasStart ) ] ,  function ( x )   bfs (   subGraph (  x ,  object ) ) )    names (  def ) -  NULL   wsta -   bfs (   subGraph (   ccc [[   which (  hasStart ) ] ] ,  object ) ,  node )   return (   c (   list (  wsta ) ,  def ) ) }   nv -   length (  nodvec )   em -   edgeMatrix (  object , duplicates =  TRUE )   ne -   ncol (  em )   ans -   .Call (  \"BGL_bfs_D\" ,   as.integer (  nv ) ,   as.integer (  ne ) ,   as.integer (   em -  1 ) ,   as.integer (   rep (  1 ,  ne ) ) ,   as.integer (   startind -  1 ) , PACKAGE =  \"RBGL\" )   sapply (  (   ans +  1 ) ,  function ( x , y )   y [  x ] ,   nodes (  object ) ) } ",
    "filename": "interfaces.txt"
  },
  "new_function": {
    "name": "bfs",
    "representation": "bfs",
    "signature": "c (  graph ,  character ,  logical )",
    "parameters": "function ( object , node , checkConn )",
    "body": "bfs ( object , node , checkConn )",
    "filename": "interfaces.txt"
  }
}

