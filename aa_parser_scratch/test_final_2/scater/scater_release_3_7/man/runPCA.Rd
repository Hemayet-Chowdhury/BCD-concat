% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/runPCA.R
\name{runPCA}
\alias{runPCA}
\title{Perform PCA on cell-level data}
\usage{
runPCA(object, ncomponents = 2, method = c("prcomp", "irlba"), ntop = 500,
  exprs_values = "logcounts", feature_set = NULL, scale_features = TRUE,
  use_coldata = FALSE, selected_variables = NULL, detect_outliers = FALSE,
  rand_seed = NULL, ...)
}
\arguments{
\item{object}{A SingleCellExperiment object.}

\item{ncomponents}{Numeric scalar indicating the number of principal components to obtain.}

\item{method}{String specifying how the PCA should be performed.}

\item{ntop}{Numeric scalar specifying the number of most variable features to use for PCA.}

\item{exprs_values}{Integer scalar or string indicating which assay of \code{object} should be used to obtain the expression values for the calculations.}

\item{feature_set}{Character vector of row names, a logical vector or a numeric vector of indices indicating a set of features to use for PCA.
This will override any \code{ntop} argument if specified.}

\item{scale_features}{Logical scalar, should the expression values be standardised so that each feature has unit variance?}

\item{use_coldata}{Logical scalar specifying whether the column data should be used instead of expression values to perform PCA.}

\item{selected_variables}{List of strings or a character vector indicating which variables in \code{colData(object)} to use for PCA when \code{use_coldata=TRUE}.
If a list, each entry can take the form described in \code{?"\link{scater-vis-var}"}.}

\item{detect_outliers}{Logical scalar, should outliers be detected based on PCA coordinates generated from column-level metadata?}

\item{rand_seed}{Numeric scalar specifying the random seed when using \code{method="irlba"}.}

\item{...}{Additional arguments to pass to \code{\link[irlba]{prcomp_irlba}} when \code{method="irlba"}.}
}
\value{
A SingleCellExperiment object containing the first \code{ncomponent} principal coordinates for each cell.
If \code{use_coldata=FALSE}, this is stored in the \code{"PCA"} entry of the \code{reducedDims} slot.
Otherwise, it is stored in the \code{"PCA_coldata"} entry.

The proportion of variance explained by each PC is stored as a numeric vector in the \code{"percentVar"} attribute of the reduced dimension matrix.
Note that this will only be of length equal to \code{ncomponents} when \code{method} is not \code{"prcomp"}.
This is because approximate PCA methods do not compute singular values for all components.
}
\description{
Perform a principal components analysis (PCA) on cells, based on the data in a SingleCellExperiment object.
}
\details{
The function \code{\link{prcomp}} is used internally to do the PCA when \code{method="prcomp"}.
Alternatively, the \pkg{irlba} package can be used, which performs a fast approximation of PCA through the \code{\link[irlba]{prcomp_irlba}} function.
This is especially useful for large, sparse matrices.

If \code{use_coldata=TRUE}, PCA will be performed on column-level metadata. 
The \code{selected_variables} defaults to a vector containing:
\itemize{
\item \code{"pct_counts_top_100_features"}
\item \code{"total_features"}
\item \code{"pct_counts_feature_control"}
\item \code{"total_features_feature_control"}
\item \code{"log10_total_counts_endogenous"}
\item \code{"log10_total_counts_feature_control"}
}
This can be useful for identifying outliers cells based on QC metrics, especially when combined with \code{detect_outliers=TRUE}.
If outlier identification is enabled, the \code{outlier} field of the output \code{colData} will contain the identified outliers.
}
\examples{
## Set up an example SingleCellExperiment
data("sc_example_counts")
data("sc_example_cell_info")
example_sce <- SingleCellExperiment(
    assays = list(counts = sc_example_counts),
    colData = sc_example_cell_info
)
example_sce <- normalize(example_sce)

example_sce <- runPCA(example_sce)
reducedDimNames(example_sce)
head(reducedDim(example_sce))
}
\seealso{
\code{\link{prcomp}}, \code{\link[scater]{plotPCA}}
}
\author{
Aaron Lun, based on code by Davis McCarthy
}
